@using eShop.WebAppComponents.Item
@using System
@using Microsoft.JSInterop

@using Microsoft.Extensions.Logging
@inject ILogger<CatalogListItem> Logger

@inject IProductImageUrlProvider ProductImages
@inject CatalogService CatalogService
@* @inject IJSRuntime JSRuntime *@

<div class="catalog-item">
    <a class="catalog-product" href="@ItemHelper.Url(Item)" data-enhance-nav="false">
        <span class='catalog-product-image'>
            <img alt="@Item.Name" src='@ProductImages.GetProductImageUrl(Item)' />
        </span>
        <span class='catalog-product-content'>
            <span class='name'>@Item.Name</span>
            <span class='price'>
                @if(@ShowDiscountEnabled()) 
                {
                    @discount(@Item.Price).ToString("$0.00") <s>@Item.Price.ToString("$0.00")</s>
                } 
                else 
                {
                    @Item.Price.ToString("$0.00")
                }
            </span>
            @if(@ShowRatingEnabled()) { <span class='rating'>@Rating</span> }
        </span>
    </a>
</div>

@code {
    @* public async Task LogToConsole(string message)
    {
        await JSRuntime.InvokeVoidAsync("console.log", message);
    } *@

    [Parameter, EditorRequired]
    public required CatalogItem Item { get; set; }

    [Parameter]
    public bool IsLoggedIn { get; set; }

    public decimal discount(decimal price)
    {
        return price - (price * 0.20m);
    }

    public bool showDiscountEnabled = false;

    public bool ShowDiscountEnabled()
    {
        return showDiscountEnabled;
    }

    public string Rating = "☆☆★";

    public bool showRatingEnabled = false;

    public bool ShowRatingEnabled()
    {
        return showRatingEnabled;
    }

    protected override async Task OnInitializedAsync()
    {
        Random random = new Random();
        int r = random.Next(0, 6);

        string fullStar = "★";
        string emptyStar = "☆";

        string result = "";
        for(int j = 0; j < 5 - r; j++) {
            result = emptyStar + result;
        }
        for(int i = 0; i < r; i++) {
            result = fullStar + result;
        }
        Rating = result;

        string? showRating = await CatalogService.DisplayRatingAsync();
        @* await LogToConsole("raw showRating: " + showRating); *@
        Logger.LogInformation("DBM raw showRating: " + showRating);

        if(showRating != null) {
            showRatingEnabled = string.Equals(showRating, "On");
        }

        string? showDiscount = await CatalogService.DisplayDiscountAsync();
        Logger.LogInformation("DBM raw showDiscount: " + showDiscount);

        if(showDiscount != null) {
            showDiscountEnabled = string.Equals(showDiscount, "On");
        }

        string? trackResponse = await CatalogService.TrackEventAsync("izzy", "izzy_in_ms", 1001);
    }
}
